// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contacts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contacts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contacts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contacts_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contacts_2eproto;
namespace tofu {
class contact;
struct contactDefaultTypeInternal;
extern contactDefaultTypeInternal _contact_default_instance_;
class peopleInfo;
struct peopleInfoDefaultTypeInternal;
extern peopleInfoDefaultTypeInternal _peopleInfo_default_instance_;
class peopleInfo_phone;
struct peopleInfo_phoneDefaultTypeInternal;
extern peopleInfo_phoneDefaultTypeInternal _peopleInfo_phone_default_instance_;
}  // namespace tofu
PROTOBUF_NAMESPACE_OPEN
template<> ::tofu::contact* Arena::CreateMaybeMessage<::tofu::contact>(Arena*);
template<> ::tofu::peopleInfo* Arena::CreateMaybeMessage<::tofu::peopleInfo>(Arena*);
template<> ::tofu::peopleInfo_phone* Arena::CreateMaybeMessage<::tofu::peopleInfo_phone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tofu {

// ===================================================================

class peopleInfo_phone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tofu.peopleInfo.phone) */ {
 public:
  inline peopleInfo_phone() : peopleInfo_phone(nullptr) {}
  ~peopleInfo_phone() override;
  explicit PROTOBUF_CONSTEXPR peopleInfo_phone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  peopleInfo_phone(const peopleInfo_phone& from);
  peopleInfo_phone(peopleInfo_phone&& from) noexcept
    : peopleInfo_phone() {
    *this = ::std::move(from);
  }

  inline peopleInfo_phone& operator=(const peopleInfo_phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline peopleInfo_phone& operator=(peopleInfo_phone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const peopleInfo_phone& default_instance() {
    return *internal_default_instance();
  }
  static inline const peopleInfo_phone* internal_default_instance() {
    return reinterpret_cast<const peopleInfo_phone*>(
               &_peopleInfo_phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(peopleInfo_phone& a, peopleInfo_phone& b) {
    a.Swap(&b);
  }
  inline void Swap(peopleInfo_phone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(peopleInfo_phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  peopleInfo_phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<peopleInfo_phone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const peopleInfo_phone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const peopleInfo_phone& from) {
    peopleInfo_phone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(peopleInfo_phone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tofu.peopleInfo.phone";
  }
  protected:
  explicit peopleInfo_phone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 1,
  };
  // string numbers = 1;
  void clear_numbers();
  const std::string& numbers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_numbers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_numbers();
  PROTOBUF_NODISCARD std::string* release_numbers();
  void set_allocated_numbers(std::string* numbers);
  private:
  const std::string& _internal_numbers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_numbers(const std::string& value);
  std::string* _internal_mutable_numbers();
  public:

  // @@protoc_insertion_point(class_scope:tofu.peopleInfo.phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numbers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contacts_2eproto;
};
// -------------------------------------------------------------------

class peopleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tofu.peopleInfo) */ {
 public:
  inline peopleInfo() : peopleInfo(nullptr) {}
  ~peopleInfo() override;
  explicit PROTOBUF_CONSTEXPR peopleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  peopleInfo(const peopleInfo& from);
  peopleInfo(peopleInfo&& from) noexcept
    : peopleInfo() {
    *this = ::std::move(from);
  }

  inline peopleInfo& operator=(const peopleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline peopleInfo& operator=(peopleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const peopleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const peopleInfo* internal_default_instance() {
    return reinterpret_cast<const peopleInfo*>(
               &_peopleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(peopleInfo& a, peopleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(peopleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(peopleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  peopleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<peopleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const peopleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const peopleInfo& from) {
    peopleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(peopleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tofu.peopleInfo";
  }
  protected:
  explicit peopleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef peopleInfo_phone phone;

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumbersFieldNumber = 3,
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated .tofu.peopleInfo.phone phone_numbers = 3;
  int phone_numbers_size() const;
  private:
  int _internal_phone_numbers_size() const;
  public:
  void clear_phone_numbers();
  ::tofu::peopleInfo_phone* mutable_phone_numbers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo_phone >*
      mutable_phone_numbers();
  private:
  const ::tofu::peopleInfo_phone& _internal_phone_numbers(int index) const;
  ::tofu::peopleInfo_phone* _internal_add_phone_numbers();
  public:
  const ::tofu::peopleInfo_phone& phone_numbers(int index) const;
  ::tofu::peopleInfo_phone* add_phone_numbers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo_phone >&
      phone_numbers() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tofu.peopleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo_phone > phone_numbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t age_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contacts_2eproto;
};
// -------------------------------------------------------------------

class contact final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tofu.contact) */ {
 public:
  inline contact() : contact(nullptr) {}
  ~contact() override;
  explicit PROTOBUF_CONSTEXPR contact(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contact(const contact& from);
  contact(contact&& from) noexcept
    : contact() {
    *this = ::std::move(from);
  }

  inline contact& operator=(const contact& from) {
    CopyFrom(from);
    return *this;
  }
  inline contact& operator=(contact&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const contact& default_instance() {
    return *internal_default_instance();
  }
  static inline const contact* internal_default_instance() {
    return reinterpret_cast<const contact*>(
               &_contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(contact& a, contact& b) {
    a.Swap(&b);
  }
  inline void Swap(contact* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  contact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<contact>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const contact& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const contact& from) {
    contact::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contact* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tofu.contact";
  }
  protected:
  explicit contact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeopleInfoFieldNumber = 1,
  };
  // repeated .tofu.peopleInfo people_info = 1;
  int people_info_size() const;
  private:
  int _internal_people_info_size() const;
  public:
  void clear_people_info();
  ::tofu::peopleInfo* mutable_people_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo >*
      mutable_people_info();
  private:
  const ::tofu::peopleInfo& _internal_people_info(int index) const;
  ::tofu::peopleInfo* _internal_add_people_info();
  public:
  const ::tofu::peopleInfo& people_info(int index) const;
  ::tofu::peopleInfo* add_people_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo >&
      people_info() const;

  // @@protoc_insertion_point(class_scope:tofu.contact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo > people_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contacts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// peopleInfo_phone

// string numbers = 1;
inline void peopleInfo_phone::clear_numbers() {
  _impl_.numbers_.ClearToEmpty();
}
inline const std::string& peopleInfo_phone::numbers() const {
  // @@protoc_insertion_point(field_get:tofu.peopleInfo.phone.numbers)
  return _internal_numbers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void peopleInfo_phone::set_numbers(ArgT0&& arg0, ArgT... args) {
 
 _impl_.numbers_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tofu.peopleInfo.phone.numbers)
}
inline std::string* peopleInfo_phone::mutable_numbers() {
  std::string* _s = _internal_mutable_numbers();
  // @@protoc_insertion_point(field_mutable:tofu.peopleInfo.phone.numbers)
  return _s;
}
inline const std::string& peopleInfo_phone::_internal_numbers() const {
  return _impl_.numbers_.Get();
}
inline void peopleInfo_phone::_internal_set_numbers(const std::string& value) {
  
  _impl_.numbers_.Set(value, GetArenaForAllocation());
}
inline std::string* peopleInfo_phone::_internal_mutable_numbers() {
  
  return _impl_.numbers_.Mutable(GetArenaForAllocation());
}
inline std::string* peopleInfo_phone::release_numbers() {
  // @@protoc_insertion_point(field_release:tofu.peopleInfo.phone.numbers)
  return _impl_.numbers_.Release();
}
inline void peopleInfo_phone::set_allocated_numbers(std::string* numbers) {
  if (numbers != nullptr) {
    
  } else {
    
  }
  _impl_.numbers_.SetAllocated(numbers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.numbers_.IsDefault()) {
    _impl_.numbers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tofu.peopleInfo.phone.numbers)
}

// -------------------------------------------------------------------

// peopleInfo

// string name = 1;
inline void peopleInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& peopleInfo::name() const {
  // @@protoc_insertion_point(field_get:tofu.peopleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void peopleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tofu.peopleInfo.name)
}
inline std::string* peopleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tofu.peopleInfo.name)
  return _s;
}
inline const std::string& peopleInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void peopleInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* peopleInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* peopleInfo::release_name() {
  // @@protoc_insertion_point(field_release:tofu.peopleInfo.name)
  return _impl_.name_.Release();
}
inline void peopleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tofu.peopleInfo.name)
}

// int32 age = 2;
inline void peopleInfo::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t peopleInfo::_internal_age() const {
  return _impl_.age_;
}
inline int32_t peopleInfo::age() const {
  // @@protoc_insertion_point(field_get:tofu.peopleInfo.age)
  return _internal_age();
}
inline void peopleInfo::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void peopleInfo::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:tofu.peopleInfo.age)
}

// repeated .tofu.peopleInfo.phone phone_numbers = 3;
inline int peopleInfo::_internal_phone_numbers_size() const {
  return _impl_.phone_numbers_.size();
}
inline int peopleInfo::phone_numbers_size() const {
  return _internal_phone_numbers_size();
}
inline void peopleInfo::clear_phone_numbers() {
  _impl_.phone_numbers_.Clear();
}
inline ::tofu::peopleInfo_phone* peopleInfo::mutable_phone_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:tofu.peopleInfo.phone_numbers)
  return _impl_.phone_numbers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo_phone >*
peopleInfo::mutable_phone_numbers() {
  // @@protoc_insertion_point(field_mutable_list:tofu.peopleInfo.phone_numbers)
  return &_impl_.phone_numbers_;
}
inline const ::tofu::peopleInfo_phone& peopleInfo::_internal_phone_numbers(int index) const {
  return _impl_.phone_numbers_.Get(index);
}
inline const ::tofu::peopleInfo_phone& peopleInfo::phone_numbers(int index) const {
  // @@protoc_insertion_point(field_get:tofu.peopleInfo.phone_numbers)
  return _internal_phone_numbers(index);
}
inline ::tofu::peopleInfo_phone* peopleInfo::_internal_add_phone_numbers() {
  return _impl_.phone_numbers_.Add();
}
inline ::tofu::peopleInfo_phone* peopleInfo::add_phone_numbers() {
  ::tofu::peopleInfo_phone* _add = _internal_add_phone_numbers();
  // @@protoc_insertion_point(field_add:tofu.peopleInfo.phone_numbers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo_phone >&
peopleInfo::phone_numbers() const {
  // @@protoc_insertion_point(field_list:tofu.peopleInfo.phone_numbers)
  return _impl_.phone_numbers_;
}

// -------------------------------------------------------------------

// contact

// repeated .tofu.peopleInfo people_info = 1;
inline int contact::_internal_people_info_size() const {
  return _impl_.people_info_.size();
}
inline int contact::people_info_size() const {
  return _internal_people_info_size();
}
inline void contact::clear_people_info() {
  _impl_.people_info_.Clear();
}
inline ::tofu::peopleInfo* contact::mutable_people_info(int index) {
  // @@protoc_insertion_point(field_mutable:tofu.contact.people_info)
  return _impl_.people_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo >*
contact::mutable_people_info() {
  // @@protoc_insertion_point(field_mutable_list:tofu.contact.people_info)
  return &_impl_.people_info_;
}
inline const ::tofu::peopleInfo& contact::_internal_people_info(int index) const {
  return _impl_.people_info_.Get(index);
}
inline const ::tofu::peopleInfo& contact::people_info(int index) const {
  // @@protoc_insertion_point(field_get:tofu.contact.people_info)
  return _internal_people_info(index);
}
inline ::tofu::peopleInfo* contact::_internal_add_people_info() {
  return _impl_.people_info_.Add();
}
inline ::tofu::peopleInfo* contact::add_people_info() {
  ::tofu::peopleInfo* _add = _internal_add_people_info();
  // @@protoc_insertion_point(field_add:tofu.contact.people_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tofu::peopleInfo >&
contact::people_info() const {
  // @@protoc_insertion_point(field_list:tofu.contact.people_info)
  return _impl_.people_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tofu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contacts_2eproto
