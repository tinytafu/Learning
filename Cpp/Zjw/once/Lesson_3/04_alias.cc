//引用:非实体 不占内存中的内存单元
#include <iostream>
using namespace std;
int main () {
  int a = 10;
  int& b = a;//这不是利用a的值给b进行赋值,而是引用b是a表示的对象的别名,对象是内存中的某一块内存空间
  b = 20;//对引用b赋值,就是在对引用b的引用对象a赋值,也就是引用的目标内存赋值
  /*对引用b的所有操作都是在对引用对象(引用目标内存)的操作*/
  cout << "a = " << a << "b = " << b << endl;//读取引用b的值就是在读取引用目标内存(a)的值
  cout << "&a = " <<&a << "&b = " << &b << endl;//读取引用b的地址,就是在读取引用目标内存(a)的地址
  
  int c = 20;
  b = c;//不要理解为引用b所引用的对象更改为c了,其实是使用c的值给引用b所引用的目标内存(a)赋值

  cout << "a = " << a << "b = " << b << "c = " << c << endl;
  cout << "&a = " << &a << "&b = " << &b << "&c = " << &c << endl;
  /*不要理解为引用d是引用b的别名,引用非实体,不能在被引用.这里是引用d引用了引用b所引用目标内存(a)
   * 也就是说引用d现在也是变量a的引用*/
  int &d = b;

  /*e是一个常左值,当你使用引用去引用这个变量的时候,这个引用也是需要拥有不可以修改所引用的对象的能
   * 力的,因此常左值需要使用常量引用去引用*/
  const int e = 30;
  //int& g = e;error
  const int& g = 3;
  /*当被引用的对象是一个非常左值的时候,代表这个对象是可以被修改的,那么通过引用也会可以修改的
   * 那么这时候使用非常量和常量引用都可以的,常量引用多加了一层限制*/
  int f = 20;
  int &p  = f;
  const int &p1 = f;
}
